name: Build
on: [ push, pull_request, workflow_dispatch ]
env:
  REGISTRY: ghcr.io
  BUILD_TAG: sha-${{ github.sha }}
jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      packages: write

    steps:
      # See https://github.com/docker/build-push-action/blob/v2.10.0/TROUBLESHOOTING.md#repository-name-must-be-lowercase
      - name: Sanitize repo slug
        uses: actions/github-script@v6
        id: slug
        with:
          result-encoding: string
          script: return '${{ github.repository }}'.toLowerCase()

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ steps.slug.outputs.result }}:${{ env.BUILD_TAG }}

    outputs:
      # TODO: Figure out how to DRY this
      image_path: ${{ env.REGISTRY }}/${{ steps.slug.outputs.result }}
      tagged_image: ${{ env.REGISTRY }}/${{ steps.slug.outputs.result }}:${{ env.BUILD_TAG }}

  test:
    needs: build
    runs-on: ubuntu-latest

    container:
      image: ${{ needs.build.outputs.tagged_image }}

    defaults:
      run:
        working-directory: /opt/app

    services:
      db:
        image: postgres
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: root

    steps:
      - name: Run tests
        env:
          RAILS_ENV: test
        run: bundle exec rake check -t

      - name: Run style checks
        run: bundle exec rubocop

      - name: Upload artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: /opt/app/artifacts/**

  push:
    needs: [ build, test ]
    runs-on: ubuntu-latest

    permissions:
      packages: write

    env:
      IMAGE_PATH: ${{ needs.build.outputs.image_path }}
      TAGGED_IMAGE: ${{ needs.build.outputs.tagged_image }}

    steps:
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.IMAGE_PATH }}

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag and push image
        uses: akhilerm/tag-push-action@v2.0.0
        with:
          src: ${{ env.TAGGED_IMAGE }}
          dst: |
            ${{ steps.meta.outputs.tags }}
